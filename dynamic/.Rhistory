filter(Year==2019,!is.na(Schooling))%>%
select(Country,Schooling,HDI)
# Merge
df<-merge(df,schooling,by="Country", all.x=TRUE)
# Missing for
#   Anguilla, Aruba, Bermuda, British Virgin  Islands, Cape  Verde, Cayman  Islands, Cook, Islands Cura?ao, Faeroe  Islands, Gibraltar  Greenland  Korea,  Democratic  People's  Republic  of Monaco, Montserrat, Nauru   Sint  Maarten  (Kingdom  of  the  Netherlands) Somalia Tokelau, Turks  and  Caicos  Islands  Tuvalu
# Load covid cases
covid<-read_csv("analysisdata/coviddata.csv")%>%
select(1,4,9)%>%
rename(Country=Name,
CovidCases=`Cases - cumulative total per 100000 population`,
CovidDeaths=`Deaths - cumulative total per 100000 population`)
# Merge
df<-merge(df,covid,by="Country", all.x=TRUE)
# Missing for Cape Verde
# List of countries
#country_list<-df%>%group_by(Country)%>%filter(row_number()==1)%>%select(Country)
#write_csv(country_list,"country_list.csv")
#---------------------- Total stats ----------------------
df%>%filter(!is.na(Enrollment))%>%mutate(durationXenrollment=duration*Enrollment)%>%
ungroup()%>%
filter(measure=="Full & partial closures")%>%
summarise(total_weeks_unweighted=mean(duration,na.rm = TRUE),
total_weeks_enrollment=sum(durationXenrollment,na.rm = TRUE),
total_enrollment=sum(Enrollment,na.rm = TRUE))%>%
mutate(total_weeks_weighted_enr=total_weeks_enrollment/total_enrollment)
# Select full and partial clusures
df_map<-df%>%filter(measure=="Full & partial closures")%>%
mutate(dur=case_when(
duration<20~"0-19 Weeks",
duration>19&duration<32~"20-31 Weeks",
duration>31&duration<47~"32-46 Weeks",
duration>46&duration<62~"47-61 Weeks"
))
# Extract Map data
world_map <- map_data("world")%>%rename(Country=region)%>%
mutate(Country=case_when(
Country=="Antigua"~"Antigua and Barbuda",
Country=="Brunei"~"Brunei Darussalam",
Country=="Ivory Coast"~"C?te d'Ivoire",
Country=="Republic of Congo"~"Congo",
Country=="Democratic Republic of the Congo"~"Congo, Democratic Republic of the",
Country=="Czech Republic"~"Czechia",
Country=="Swaziland"~"Eswatini",
Country=="Iran"~"Iran, Islamic Republic of",
Country=="South Korea"~"Korea, Republic of",
Country=="Laos"~"Lao People's Democratic Republic",
Country=="Macedonia"~"Macedonia, the former Yugoslav Republic of",
Country=="Micronesia"~"Micronesia, Federated States of",
Country=="Moldova"~"Moldova, Republic of",
Country=="Russia"~"Russian Federation",
Country=="Saint Vincent"~"Saint Vincent and the Grenadines",
Country=="Tanzania"~"Tanzania, United Republic of",
Country=="Tobago"~"Trinidad and Tobago",
Country=="Trinidad"~"Trinidad and Tobago",
Country=="UK"~"United Kingdom",
Country=="USA"~"United States",
Country=="Vietnam"~"Viet Nam",
TRUE~Country))
#missing<-anti_join(world_map, df_map,by = "Country")%>%
#   group_by(Country)%>%filter(row_number()==1)%>%select("Country")
#write_csv(missing,"missing_in_map.csv")
#missing1<-anti_join(df_map,world_map ,by = "Country")%>%
#   group_by(Country)%>%filter(row_number()==1)%>%select("Country")
#write_csv(missing1,"missing_in_country.csv")
# merge
mapdata<-merge(world_map, df_map,by = "Country",all.x=TRUE)
# Create regions
dfy<-df%>%mutate(durationy=duration/40,relduration=durationy/Schooling)
# Create regions
dfy<-df%>%mutate(durationy=duration/40,relduration=durationy/Schooling)
ggplot(dfy,aes(x=reorder(Country,relduration),y=relduration))+
geom_bar(stat="identity")
# Create regions
dfy<-df%>%mutate(durationy=duration/40,relduration=durationy/Schooling)
ggplot(dfy,aes(x=reorder(Country,relduration),y=relduration))+
geom_bar(stat="identity")+
theme(axis.text.x = element_text(angle=45))
# Create regions
dfy<-df%>%mutate(durationy=duration/40,relduration=durationy/Schooling)
ggplot(dfy,aes(x=reorder(Country,relduration),y=relduration))+
geom_bar(stat="identity")+
theme(axis.text.x = element_text(angle=90))
dfy<-df%>%mutate(durationy=duration/40,relduration=durationy/Schooling)%>%arrange(relduration)
View(dfy)
table(df$measure)
dfy<-df%>%mutate(durationy=duration/40,relduration=durationy/Schooling)%>%filter(measure=="Full closures") %>%arrange(relduration)
ggplot(dfy,aes(x=reorder(Country,relduration),y=relduration))+
geom_bar(stat="identity")+
theme(axis.text.x = element_text(angle=90))
View(df)
View(dfy)
require("emo")
library("aewr")
library("tidyverse")
library("skimr")
library("readstata13")
library("sjPlot")
library("psych")
library("openxlsx")
knitr::opts_chunk$set(echo = FALSE)
# Use head() to print first 6 observations of school_data_1
head(school_data_1)
tail(school_data_2,n=8)
glimpse(school_data_3)
# Merge school_data_1 and school_data_2 and save as school_data_merged
school_data_merged<-merge(school_data_1,school_data_2,by="person_id")
# Merge school_data_3 with school_data_merged
school_data_merged<-merge(school_data_merged,school_data_3,by=c("person_id","school_id"))
# summary statistics
summary(school_data_merged)
head(school_data_tidy)
# Load skimr
library("skimr")
# Use skim() to skim the data
skim(school_data_tidy)
# Select only rows with no missing values
school_data_selected<-school_data_tidy%>%
filter(!is.na(parental_schooling),!is.na(test_score))
# Use apply to apply a function on all columns
apply(school_data_selected,2, function(x) sum(is.na(x)))
# rename summercamp to summerschool
analysisdata<-rename(school_data_selected, summerschool=summercamp)
# use head to view the first 6 observations
head(analysisdata)
# Standardize test score
analysisdata<-analysisdata%>%
group_by(year)%>%
rename(test_score_raw=test_score)%>%
mutate(test_score=(test_score_raw-mean(test_score_raw))/sd(test_score_raw))
# show mean of test_score
print(paste("Mean of test score:",mean(analysisdata$test_score)))
#show sd of test_score
print(paste("SD of test score:",sd(analysisdata$test_score)))
# load modelsummary
library("modelsummary")
# create a summary stat table
analysisdata%>%
filter(year==2)%>%
select(female,starts_with("paren"),letter,summerschool,test_score)%>%
datasummary_skim()
# load modelsummary
library("modelsummary")
# create a summary stat table
datasummary(female+parental_schooling+parental_lincome+
letter+test_score~Factor(summerschool)*(Mean+SD),
sparse_header = FALSE,
data=filter(analysisdata,year==2))
# load modelsummary
library("modelsummary")
# create a summary stat table
datasummary((`Female`=female)+
(`Parental schooling (years)`=parental_schooling)+
(`Parental income (log)`=parental_lincome)+
(`Received reminder letter`=letter)+
(`Test Score`=test_score)~
(`Attended summer school`=Factor(summerschool))*
(Mean+SD),
sparse_header = FALSE,
data=filter(analysisdata,year==2))
# load stargazer
library("stargazer")
# prepare data for stargazer
data_for_stargazer<-analysisdata%>%
select(female,parental_schooling,parental_lincome,letter,test_score)%>%
filter(year==2)%>%
as.data.frame()
# create a summary stat table
stargazer(data_for_stargazer,type="html")
# load ggplot2
library("ggplot2")
# create a scatter plot with a fitted line
ggplot(analysisdata%>%filter(year==5),
aes(x=parental_lincome,y=test_score))+
geom_smooth() +
geom_point(alpha=0.1)+
theme_classic()
# Load patchwork
library("patchwork")
# Create raw chart element
rawchart<-ggplot(analysisdata%>%filter(year==4),x=as.factor(fill))+
theme_classic()
# Create bar chart of pre summer school test score and summer school
p1<-rawchart+
geom_smooth(aes(x=parental_schooling,y=test_score)) +
geom_point(aes(x=parental_schooling,y=test_score),alpha=0.1)+
labs(x="Parental schooling", y="Test Score Year 5")
# Create bar chart of pre summer school test score and summer school
p2<-rawchart+
geom_bar(aes(x=as.factor(summerschool),y=test_score),
stat="summary",fun="mean")+
labs(y="Test Score Year 5", x="Attended Summer School")
# Create bar chart of parental schooling and summer school attendance
p3<-rawchart+
geom_boxplot(aes(x=as.factor(summerschool),y=parental_lincome))+
labs(y="Parental Income (log)", x="Attended Summer School")
# Combine charts
p1/(p2+p3)
knitr::include_graphics("images/selectionbias.png")
# create a histogram and density chart
ggplot(analysisdata%>%filter(year==6),
aes(x=test_score,fill=as.factor(summerschool)))+
geom_histogram(aes(y=..density..),bins = 50,alpha=0.5,
position="identity",color="white")+
geom_density(alpha=0.0,size=1,show_guide= FALSE)+
theme_minimal()+
labs(y="Density",x="Test score",fill=" ")+
scale_fill_brewer(palette="Set2",labels=c("No summer school","Summer school"))+
theme(legend.position="top")
knitr::include_graphics("images/joydivision.png")
# Load ggridges
library("ggridges")
# create a ggridges  chart
ggplot(analysisdata,aes(y=as.factor(year),x=test_score,fill=as.factor(letter) ))+
geom_density_ridges(  alpha = .7, scale=1.5,color = "white", from = -2.5, to = 2.5)+
theme_minimal()+
theme_ridges(grid = FALSE)+
scale_y_discrete(expand = c(0, 0)) +
scale_x_continuous(expand = c(0, 0)) +
scale_fill_brewer(palette="Set1",labels=c("No letter","Letter"))+
labs(x="Test Score",y="Year",fill=" ",
title="Test score distribution by reminder letter status  & year")+
theme(legend.position="top",aspect.ratio=4/3,plot.title = element_text(hjust = 0.5))
# Filter year 5
df<-analysisdata%>%filter(year==5)
# Conduct a t test
t.test(test_score~letter,data=df)
# Conduct a t test on analysisdata restricted to year 4
t.test(test_score~letter,data=analysisdata%>%filter(year==4))
# t test
library(modelsummary)
library(estimatr)
# Filter and modify data
testdata<-analysisdata%>%
filter(year==5)%>%
ungroup()%>%
mutate(Treated=ifelse(letter==1,"Letter","No Letter"))%>%
select(female,parental_schooling,parental_lincome,test_score,Treated)%>%
rename(`Female`=female,
`Parental schooling (years)`=parental_schooling,
`Parental income (log)`=parental_lincome,
`Test Score`=test_score)
# Table with balancing test
datasummary_balance(~Treated,
data = testdata,
title = "Balance of pre-treatment variables",
notes = "Notes: This is a brilliant table!",
fmt= '%.5f',
dinm_statistic = "p.value")
# Ordinary Least Squares regression
lm(test_score~letter,data=analysisdata%>%filter(year==6))
# Summary of Ordinary Least Squares regression
summary(lm(test_score~letter,data=analysisdata%>%filter(year==6)))
#  Ordinary Least Squares regression
model1<-lm(test_score~parental_schooling+parental_lincome+letter+female,data=analysisdata%>%filter(year==6))
# Summary of model1
summary(model1)
# Load packages
library(lfe)
# Select data
regdata<-analysisdata%>%filter(year==6)
# Regression
m1<-felm(test_score~letter+parental_lincome+female+parental_schooling|0|0|school_id
,data=regdata, cmethod="reghdfe")
# Summary of regression
summary(m1)
# Load flextable and modelsummary
library(flextable)
library(modelsummary)
# Regressions
models<-list(
m1<-felm(test_score ~letter+parental_schooling+parental_lincome+female|0|0|school_id
,data=regdata, cmethod="reghdfe"),
m2<-felm(test_score ~letter+parental_schooling+parental_lincome+female|
school_id+year|0|school_id,data=regdata, cmethod="reghdfe")
)
# Generate table
modelsummary(models, stars = TRUE,statistic = 'std.error',
fmt= '%.4f',
coef_omit= '(Intercept)', output = 'flextable')
# Estimate LPM (the first stage)
models<-list(
m1<-felm(summerschool ~letter+parental_schooling+parental_lincome+female|0|0|school_id
,data=regdata, cmethod="reghdfe"),
m2<-felm(summerschool ~letter+parental_schooling+parental_lincome+female|
school_id+year|0|school_id,data=regdata, cmethod="reghdfe")
)
# Store the mean of dependent variable in a data frame
added_stats<-tibble("Mean of Dep. ",m1=mean(regdata$summerschool),m2=mean(regdata$summerschool))
# Generate table
modelsummary(models, stars = TRUE,statistic = 'std.error',
fmt= '%.4f',add_rows = added_stats,
coef_omit= '(Intercept)', output = 'flextable')
##  Estimate a binary outcomes model using a probit
probit_results <- glm(summerschool ~letter, data = regdata, family = binomial(link="probit"))
# Print the results
summary(probit_results)
##  Estimate a binary outcomes model using a logit
logit_results <- glm(summerschool ~letter+parental_lincome+female+parental_schooling, data = regdata, family = binomial(link="logit"))
# Print the results
summary(logit_results)
# ## Load margins package
# library("margins")
# ##  Compute marginal effects
# mfx_logit<- margins(logit_results)
# mfx_probit<-margins(probit_results)
# # Include in table
# modelsummary(list(mfx_logit,mfx_probit), output = 'flextable')
# Load the AER package
library(AER)
# Estimate IV specification with
summary(ivreg(test_score~summerschool+female+parental_lincome+parental_schooling|
female+parental_lincome+parental_schooling+letter,data=regdata))
# Estimate IV specification with felm
m1<-felm(test_score~parental_lincome+female+parental_schooling| # Outcome eq.
school_id|                                           # Fixed effects
(summerschool~letter)|                               # First stage eq.
school_id                                            # Cluster var
,data=regdata, cmethod="reghdfe")
# Summary of results
summary(m1)
library("gt")
# Estimate OLS
OLS<-felm(test_score~summerschool+parental_lincome+female+parental_schooling|school_id|0|school_id,data=regdata)
# Estimate reduced form
RF<-felm(test_score~letter+parental_lincome+female+parental_schooling|school_id|0|school_id,data=regdata)
# Estimate first stage
FS<-felm(summerschool~letter+parental_lincome+female+parental_schooling|school_id|0|school_id,data=regdata)
# Estimate IV specification
IV<-felm(test_score~parental_lincome+female+parental_schooling| # Outcome eq.
school_id|                                           # Fixed effects
(summerschool~letter)|                               # First stage eq.
school_id                                            # Cluster var
,data=regdata, cmethod="reghdfe")
# Combine results
IVresults<-list("OLS"<-OLS,"RF"<-RF,"FS"<-FS,"IV"<-IV)
# Coefficients
cm <- c('`summerschool(fit)`' = 'Summer School',
'summerschool' = 'Summer School','parental_lincome' = 'Parental Income',
'letter' = 'Reminder letter', "female"="Female","parental_schooling"="Parental Schooling")
# Output Table
modelsummary(IVresults, stars = TRUE,statistic = 'std.error',
fmt= '%.4f',coef_map=cm, output = 'gt'
)
# Load ggthemes
library("ggthemes")
# Collapse data on year level
collapsed_data<-analysisdata%>%
group_by(year,summerschool)%>%
summarise(test_score=mean(test_score))
# create a line chart
ggplot(collapsed_data,aes(x=year,y=test_score,color=as.factor(summerschool),group=as.factor(summerschool)))+
geom_line(size=1)+ylim(-1,1)+
geom_point(aes(shape=as.factor(summerschool)),size=3)+
theme_wsj()+
theme(legend.position="top",axis.title = element_text(size=13))+
labs(color="",x ="Year", y="Test core")+
scale_color_manual(guide = "legend", values=c("#0e0e0e","#8a8a8a"),
labels=c("No Summer School","Summer school"))+
geom_vline(xintercept=5.5, linetype="dotted",color="red")+
guides(shape=FALSE,colour = guide_legend(override.aes = list(shape = c(16, 17),
shape = c(16,17))))
library("gt")
# Modify data
df<-analysisdata%>%
mutate(after=ifelse(year>5,1,0),
afterXsummerschool=after*summerschool)%>%
rename(school=summerschool)
# Estimate DiD without controls and fixed effects
m1<-felm(test_score~school+afterXsummerschool+after|0|0|school_id,data=df)
# Estimate DiD without controls
m2<-felm(test_score~school+afterXsummerschool|school_id+year|0|school_id,data=df)
# Estimate DiD
m3<-felm(test_score~afterXsummerschool+school+parental_lincome+female+parental_schooling
|school_id+year|0|school_id,data=df)
# Leave year 5 out to avoid dip
m4<-felm(test_score~afterXsummerschool+school+parental_lincome+female+parental_schooling
|school_id+year|0|school_id,data=df%>%filter(year!=5))
# Coefficients
cm <- c('afterXsummerschool'  = 'Summer School X After',
'school'        = 'Summer School',
'after'='After')
# Output Table
modelsummary(list(m1,m2,m3,m4), stars = TRUE,statistic = 'std.error',
statistic_override = vcov,
fmt= '%.4f',coef_map=cm, output = 'gt'
)
# Load ggridges
library("ggridges")
# create a ggridges  chart
ggplot(analysisdata,aes(y=as.factor(year),x=test_score,fill=as.factor(letter) ))+
geom_density_ridges(  alpha = .7, scale=1.5,color = "white", from = -2.5, to = 2.5)+
theme_minimal()+
theme_ridges(grid = FALSE)+
geom_line()+
scale_y_discrete(expand = c(0, 0)) +
scale_x_continuous(expand = c(0, 0)) +
scale_fill_brewer(palette="Set1",labels=c("No letter","Letter"))+
labs(x="Test Score",y="Year",fill=" ",
title="Test score distribution by reminder letter status  & year")+
theme(legend.position="top",aspect.ratio=4/3,plot.title = element_text(hjust = 0.5))
# Load ggridges
library("ggridges")
# create a ggridges  chart
ggplot(analysisdata,aes(y=as.factor(year),x=test_score,fill=as.factor(letter) ))+
geom_density_ridges(  alpha = .7, scale=1.5,color = "white", from = -2.5, to = 2.5)+
theme_minimal()+
theme_ridges(grid = FALSE)+
geom_line(analysisdata,mapping=aes(x=as.factor(year),y=test_score,fill=as.factor(letter) )))+
# Load ggridges
library("ggridges")
# create a ggridges  chart
ggplot(analysisdata,aes(y=as.factor(year),x=test_score,fill=as.factor(letter) ))+
geom_density_ridges(  alpha = .7, scale=1.5,color = "white", from = -2.5, to = 2.5)+
theme_minimal()+
theme_ridges(grid = FALSE)+
geom_line(analysisdata,mapping=aes(x=as.factor(year),y=test_score,fill=as.factor(letter) ))+
scale_y_discrete(expand = c(0, 0)) +
scale_x_continuous(expand = c(0, 0)) +
scale_fill_brewer(palette="Set1",labels=c("No letter","Letter"))+
labs(x="Test Score",y="Year",fill=" ",
title="Test score distribution by reminder letter status  & year")+
theme(legend.position="top",aspect.ratio=4/3,plot.title = element_text(hjust = 0.5))
# Load ggridges
library("ggridges")
# create a ggridges  chart
ggplot(analysisdata,aes(y=as.factor(year),x=test_score,fill=as.factor(letter) ))+
geom_density_ridges(  alpha = .7, scale=1.5,color = "white", from = -2.5, to = 2.5)+
theme_minimal()+
theme_ridges(grid = FALSE)+
geom_line(analysisdata,mapping=aes(x=year,y=test_score,fill=as.factor(letter) ))+
scale_y_discrete(expand = c(0, 0)) +
scale_x_continuous(expand = c(0, 0)) +
scale_fill_brewer(palette="Set1",labels=c("No letter","Letter"))+
labs(x="Test Score",y="Year",fill=" ",
title="Test score distribution by reminder letter status  & year")+
theme(legend.position="top",aspect.ratio=4/3,plot.title = element_text(hjust = 0.5))
# Load ggridges
library("ggridges")
# create a ggridges  chart
ggplot(analysisdata,aes(y=as.factor(year),x=test_score,fill=as.factor(letter) ))+
geom_density_ridges(  alpha = .7, scale=1.5,color = "white", from = -2.5, to = 2.5)+
theme_minimal()+
theme_ridges(grid = FALSE)+
geom_line(analysisdata,mapping=aes(y=year,x=test_score,fill=as.factor(letter) ))+
scale_y_discrete(expand = c(0, 0)) +
scale_x_continuous(expand = c(0, 0)) +
scale_fill_brewer(palette="Set1",labels=c("No letter","Letter"))+
labs(x="Test Score",y="Year",fill=" ",
title="Test score distribution by reminder letter status  & year")+
theme(legend.position="top",aspect.ratio=4/3,plot.title = element_text(hjust = 0.5))
# Load ggridges
library("ggridges")
pd<-analysisdata%>%group_by(year,letter)%>%summarise(test_score=mean(test_score))
# create a ggridges  chart
ggplot(analysisdata,aes(y=as.factor(year),x=test_score,fill=as.factor(letter) ))+
geom_density_ridges(  alpha = .7, scale=1.5,color = "white", from = -2.5, to = 2.5)+
theme_minimal()+
theme_ridges(grid = FALSE)+
geom_line(pd,mapping=aes(y=year,x=test_score,fill=as.factor(letter) ))+
scale_y_discrete(expand = c(0, 0)) +
scale_x_continuous(expand = c(0, 0)) +
scale_fill_brewer(palette="Set1",labels=c("No letter","Letter"))+
labs(x="Test Score",y="Year",fill=" ",
title="Test score distribution by reminder letter status  & year")+
theme(legend.position="top",aspect.ratio=4/3,plot.title = element_text(hjust = 0.5))
# Load ggridges
library("ggridges")
pd<-analysisdata%>%group_by(year,letter)%>%summarise(test_score=mean(test_score))
# create a ggridges  chart
ggplot(analysisdata,aes(y=as.factor(year),x=test_score,fill=as.factor(letter) ))+
geom_density_ridges(  alpha = .7, scale=1.5,color = "white", from = -2.5, to = 2.5)+
theme_minimal()+
theme_ridges(grid = FALSE)+
geom_line(pd,mapping=aes(y=year,x=test_score,fill=as.factor(letter) ))+
scale_y_discrete(expand = c(0, 0)) +
coord_flip()+
scale_x_continuous(expand = c(0, 0)) +
scale_fill_brewer(palette="Set1",labels=c("No letter","Letter"))+
labs(x="Test Score",y="Year",fill=" ",
title="Test score distribution by reminder letter status  & year")+
theme(legend.position="top",aspect.ratio=4/3,plot.title = element_text(hjust = 0.5))
# Load ggridges
library("ggridges")
pd<-analysisdata%>%group_by(year,letter)%>%summarise(test_score=mean(test_score))
# create a ggridges  chart
ggplot(analysisdata,aes(y=as.factor(year),x=test_score,fill=as.factor(letter) ))+
geom_density_ridges(  alpha = .7, scale=1.5,color = "white", from = -2.5, to = 2.5)+
theme_minimal()+
theme_ridges(grid = FALSE)+
geom_line(pd,mapping=aes(y=year,x=reorder(test_score,year),fill=as.factor(letter) ))+
scale_y_discrete(expand = c(0, 0)) +
coord_flip()+
scale_x_continuous(expand = c(0, 0)) +
scale_fill_brewer(palette="Set1",labels=c("No letter","Letter"))+
labs(x="Test Score",y="Year",fill=" ",
title="Test score distribution by reminder letter status  & year")+
theme(legend.position="top",aspect.ratio=4/3,plot.title = element_text(hjust = 0.5))
# Load ggridges
library("ggridges")
# create a ggridges  chart
ggplot(analysisdata,aes(y=as.factor(year),x=test_score,fill=as.factor(letter) ))+
geom_density_ridges(  alpha = .7, scale=1.5,color = "white", from = -2.5, to = 2.5)+
theme_minimal()+
theme_ridges(grid = FALSE)+
scale_y_discrete(expand = c(0, 0)) +
coord_flip()+
scale_x_continuous(expand = c(0, 0)) +
scale_fill_brewer(palette="Set1",labels=c("No letter","Letter"))+
labs(x="Test Score",y="Year",fill=" ",
title="Test score distribution by reminder letter status  & year")+
theme(legend.position="top",aspect.ratio=4/3,plot.title = element_text(hjust = 0.5))
